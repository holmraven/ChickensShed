configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    //modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modImplementation ("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude module: 'fabric-api'
    }

    modApi "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"

    //modRuntimeOnly "curse.maven:supplementaries-412082:${rootProject.supplementaries_fabric_version}"
    //modRuntimeOnly "curse.maven:selene-499980:${rootProject.selene_fabric_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}